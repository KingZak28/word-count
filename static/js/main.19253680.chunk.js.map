{"version":3,"sources":["components/InputField.tsx","components/Scroll.tsx","components/Card.tsx","components/CardList.tsx","containers/App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputField","onTextChange","className","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","Card","word","count","CardList","words","map","i","App","handleOnClick","event","inputBox","state","wordMap","Map","replace","trim","split","forEach","key","value","get","set","finalWords","val","push","setState","handleOnTextChange","currentTarget","toLowerCase","alphabeticalSort","sort","a","b","localeCompare","numericalSort","this","onClick","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"kPAkBiBA,EAbE,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,aACjB,OACE,qBAAKC,UAAU,MAAf,SACE,uBACEA,UAAU,mCACVC,KAAK,SACLC,YAAY,kBACZC,SAAYJ,OCGPK,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,SAAS,SAAUC,OAAO,kBAAmBC,OAAO,SAAjE,SACKJ,EAAMK,YCQFC,EAXkC,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACvD,OACE,qBAAKb,UAAU,sDAAf,SACE,gCACE,6BAAKY,IACL,4BAAIC,UCWCC,EAnBE,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,MACf,OACI,8BAEQA,EAAMC,KAAI,SAACJ,EAAMK,GACb,OACI,cAAC,EAAD,CAEAL,KAAQG,EAAME,GAAGL,KACjBC,MAASE,EAAME,GAAGJ,OAFXI,SCuFhBC,G,wDA9Eb,WAAYb,GAAkB,IAAD,8BAC3B,cAAMA,IAORc,cAAgB,SAACC,GAAqD,IAG7DC,EAAY,EAAKC,MAAjBD,SACHE,EAAU,IAAIC,IAEQH,EAASI,QADhB,sCAC+B,IAGPC,OAAOC,MAAM,SAC/CC,SAAS,SAACC,GACjB,GAAY,KAARA,EAAW,CACb,IAAIC,EAA6BP,EAAQQ,IAAIF,GAC7CN,EAAQS,IAAIH,EAAKC,EAAOA,EAAQ,EAAI,OAKxC,IAlBoE,EAkBhEG,EAA4B,GAlBoC,cAmB5CV,GAnB4C,IAmBpE,2BAAkC,CAAC,IAAD,yBAC1BW,EAAa,CACjBtB,KAF8B,KAG9BC,MAH8B,MAKhCoB,EAAWE,KAAKD,IAxBkD,8BA2BpE,EAAKE,SAAS,CAACrB,MAAOkB,KAnCK,EAsC7BI,mBAAqB,SAACjB,GAEpB,EAAKgB,SAAS,CAAEf,SAAUD,EAAMkB,cAAcR,MAAMS,iBAxCzB,EA4C7BC,iBAAmB,SAACpB,GAAsD,IACjEL,EAAS,EAAKO,MAAdP,MACPA,EAAM0B,MAAM,SAACC,EAAEC,GACb,OAAOD,EAAE9B,KAAKgC,cAAcD,EAAE/B,SAEhC,EAAKwB,SAAS,CAACrB,MAAOA,KAjDK,EAoD7B8B,cAAgB,SAACzB,GAAsD,IAC9DL,EAAS,EAAKO,MAAdP,MACPA,EAAM0B,MAAM,SAACC,EAAEC,GACb,OAAOA,EAAE9B,MAAQ6B,EAAE7B,SAErB,EAAKuB,SAAS,CAACrB,MAAOA,KAvDtB,EAAKO,MAAQ,CACXD,SAAU,GACVN,MAAO,IAJkB,E,qDA6DL,IACfA,EAAS+B,KAAKxB,MAAdP,MACP,OACA,sBAAKf,UAAU,KAAf,UACE,oBAAIA,UAAU,WAAd,2BACA,wBAAQA,UAAU,iDAAiD+C,QAASD,KAAKN,iBAAjF,mCACA,wBAAQxC,UAAU,6CAA6C+C,QAASD,KAAKD,cAA7E,iCACA,cAAC,EAAD,CAAY9C,aAAgB+C,KAAKT,qBACjC,wBAAQrC,UAAU,6CAA6C+C,QAAWD,KAAK3B,cAA/E,uBACA,cAAC,EAAD,UACE,cAAC,EAAD,CAAUJ,MAASA,a,GAxETiC,cCLHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,SACE,cAAC,aAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.19253680.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\ninterface IInputFieldProps {\r\n    onTextChange(event: React.SyntheticEvent<HTMLInputElement>):void;\r\n}\r\nconst InputField = ({onTextChange}:IInputFieldProps) => {\r\n    return (\r\n      <div className='pa2'>\r\n        <input\r\n          className='pa3 ba b--green bg-lightest-blue'\r\n          type='search'\r\n          placeholder='Enter your text'\r\n          onChange = {onTextChange}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default InputField;","import * as React from 'react';\r\n\r\n// ? Added because we may not have any children to render\r\ntype Props = {\r\n    children?: JSX.Element\r\n}\r\n\r\nconst Scroll = (props: Props) => {\r\n    return (\r\n        <div style={{overflow:'scroll', border:'1px ridge black', height:'800px'}}>\r\n            {props.children}    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import * as React from 'react';\r\n\r\ninterface ICardProps {\r\n    word: string,\r\n    count: number\r\n}\r\n\r\nconst Card:React.FunctionComponent<ICardProps>   = ({word, count}) => {\r\n    return (\r\n      <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n        <div>\r\n          <h2>{word}</h2>\r\n          <p>{count}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default Card;","import * as React from 'react';\r\nimport Card from './Card';\r\nimport {IWord} from '../containers/App';\r\n\r\nconst CardList = ({words}: {words: Array<IWord>}) => {\r\n    return(\r\n        <div>\r\n            {\r\n                words.map((word, i) => {\r\n                    return (\r\n                        <Card \r\n                        key = {i}\r\n                        word = {words[i].word}\r\n                        count = {words[i].count}\r\n                        />\r\n                    );\r\n                })\r\n            \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import * as React from 'react';\nimport InputField from '../components/InputField';\nimport Scroll from '../components/Scroll';\nimport CardList from '../components/CardList';\nimport './App.css';\n\ninterface IAppProps{\n}\n\nexport interface IWord { \n  word: string;\n  count: number;\n}\n\ninterface IAppState{\n  inputBox: string;\n  words: Array<IWord>\n \n}\nclass App extends React.Component<IAppProps,IAppState> {\n  constructor(props: IAppProps){\n    super(props)\n    this.state = {\n      inputBox: '',\n      words: []\n    }\n  }\n\n  handleOnClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n\n    // Get the user's input and clean it of punctuation\n    const {inputBox} = this.state;\n    let wordMap = new Map<string,number>();\n    let regex:RegExp = /[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/g;\n    let cleanedInput:string = inputBox.replace(regex, '');\n\n  // Store each word and it's frequency into a map\n    let wordsArr: Array<string> = cleanedInput.trim().split(/[\\s+]/)\n    wordsArr.forEach( (key:string) => {\n      if( key !== \"\"){\n        let value : number | undefined = wordMap.get(key);\n        wordMap.set(key, value? value + 1 : 1) \n      }\n    })\n    \n  // Lastly update the state to reflect each word and its frequency\n    let finalWords : Array<IWord> = []\n    for (let [key,value] of wordMap ) {\n      const val: IWord = {\n        word: key,\n        count: value\n      }\n      finalWords.push(val)\n    }\n\n    this.setState({words: finalWords})\n  }\n\n  handleOnTextChange = (event: React.SyntheticEvent<HTMLInputElement>): void => {\n\n    this.setState({ inputBox: event.currentTarget.value.toLowerCase() })\n    \n  }\n\n  alphabeticalSort = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    const {words} = this.state;\n    words.sort( (a,b) => {\n      return a.word.localeCompare(b.word);\n    })\n    this.setState({words: words})\n  }\n\n  numericalSort = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    const {words} = this.state;\n    words.sort( (a,b) => {\n      return b.count - a.count;\n    })\n    this.setState({words: words})\n  }\n\n\n  render() : JSX.Element {\n    const {words} = this.state;\n    return (\n    <div className=\"tc\">\n      <h1 className='f1 white'>Text Analyzer</h1>\n      <button className='f6 link dim ph3 pv2 mb2 dib white bg-black mr1' onClick={this.alphabeticalSort} > Sort Alphabetically </button>\n      <button className='f6 link dim ph3 pv2 mb2 dib white bg-black' onClick={this.numericalSort}> Sort By Frequency </button>\n      <InputField onTextChange = {this.handleOnTextChange} />\n      <button className='f6 link dim ph3 pv2 mb2 dib white bg-black' onClick = {this.handleOnClick}> Analyze </button>\n      <Scroll>\n        <CardList words = {words} />\n      </Scroll>\n    </div>\n  );\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root') as HTMLElement\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}